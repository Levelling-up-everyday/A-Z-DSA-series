For very long numbers greater then 64 bits we can use the following method

----> include<stdint.h> header file
then use int64_t nameofthevariabel for 64 bit signed interger, similarly use uint64_t for unsigned int of 64 bits.

To use more than 64 bits usually used only in cp like int128_t,int256_t, int512_t, or int1024_t we need to include boost library instead of #include<stdint.h>
#include <boost/multiprecision/cpp_int.hpp>
using namespace boost::multiprecision;


Arrays are passesed by refrence only pass it as & when u need to store something in it.


2-d vector printing:
for (int i = 0; i < vec.size(); i++)
{
    for (int j = 0; j < vec[i].size(); j++)
    {
        cout << vec[i][j];
    }
}


vector initalization:
vector<int> row(n,0);

v.end() points after the last location ex : 1,2 ,3 points after 3

v.erase(v.begin()+1,v.begin()+3) inttial 1,2,3,4 after 1,4  it is [start,end)

priority_queue inside a tree is maintained and not stored in a linear manner, similary for set
priority_queue<int> pq ----> Largest element stays at the top  

priority_queue<int, vector<int>, greater<int>> p; -----> smallest element stays at the top
push /delete takes O(logn)

set-----> sorted and unique
if st.find(3) not present it points to after last element

Binary search stl----> bool a= binary_search(a,a+n,5);
lower bound index----> auto it=lower_bound(a,a+n,5)-a;
or lower_bound(a.begin(),a.end(),5)-a.begin();
similary for upper_bound.

he end pointer points to the element after the last element, like a.end() will point to the element after the last element.. also a + n will point to the nth element (which doesn't actually exist, it's a theoretical end position).. the pointers point like [start, end)..

mulltiset---> only soted
unorderd_set----> only unique

map<int,int> m;---> key is unique,values can repeat , key and value can be of any data type, sorted
multimap---> duplicate keys , sorted
unordered_map--> no duplicate, unsorted


sort
sort(v.begin(),v.end());
sort(v.begin(),v.end(),greater<int>);// descending order
sort(v.begin(),v.end(),comp)// comp is user defined
bool comp(pair<int,int> p1,pair<int,int> p2)
{
 //take 2 pairs and write possible condditions dont think it as an array
 if(p1.second<p2.second) return true;
 if(p1.second>p2.second) return false;
 if(p1.first> p2.first) return true;
 return false;
}
the aboe comp operator is for sorting elements in the order of second element pair in ascending and first element pair in descending

int num=7;
int count=__builtin_popcount(); // returns the no of ones of the number when represented in the binary format
for long numbers use __bulitin_popcountll();

printing all permutations of a string
string s="123";

do{
 cout<<s<<endl;
 }while(next_permutation(s.begin(),s.end());
 
 
 max element
 int maxi=*max_element(v.begin(),v.end());

  Condtion checking
  int a;
    cin>>a;
    int i=5;
    if(a&&i<7)cout<<i;
    
    if only a >1 it prints i if a is 0 condition fails and it doesnt execute the statement



Consider an array: {1,2,3,4}

Subarray: contiguous sequence in an array i.e.  {1,2},{1,2,3}

Subsequence: Need not to be contiguous, but maintains order i.e.  {1,2,4}

Subset: [1,3,2] - is not continous and does not maintain relative order of elements

Given an array/sequence of size n, possible
Subarray = n*(n+1)/2
Subseqeunce = (2^n) -1 (non-empty subsequences)
Subset = 2^n

// remove duplicates from a vector candidates
candidates.erase(unique(candidates.begin(), candidates.end()), candidates.end());

A structure is a user-defined data type in C/C++. A structure creates a data type that can be used to group items of possibly different types into a single type. 

in pointers : In general, nums[ i ][ j ] is equivalent to *(*(nums+i)+j) for arrays.


int main()
{
    int a=5,b=2,c=5,d=2;
    while(a!=0&&b!=0)
    {
        cout<<"and condition"<<endl;
        a--;
        b--;
        //Prints 2 times
    }
    while(c>=0 ||d >=0)
    {
        cout<<"Or condition"<<endl;
        c--;
        d--;
        //Prints 5 times
    }

    return 0;
}
